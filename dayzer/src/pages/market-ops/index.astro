---
import Layout from '../../layouts/Layout.astro';
import MECOverviewChart from '../../components/common/MECOverviewChart';

// Get the correct base URL for API calls
const getBaseUrl = () => {
  // If accessed via proxy, use the original site URL
  if (Astro.url.hostname === 'gridstoranalytics.com') {
    return 'https://gridstordayzer.netlify.app';
  }
  // Otherwise use the current origin
  return Astro.url.origin;
};

const baseUrl = getBaseUrl();

// Fetch TB2.6 data dynamically
let tb26Data;
try {
  const response = await fetch(`${baseUrl}/api/tb26-calculation`);
  if (response.ok) {
    tb26Data = await response.json();
  } else {
    console.error('Failed to fetch TB2.6 data:', response.status);
    tb26Data = null;
  }
} catch (error) {
  console.error('Error fetching TB2.6 data:', error);
  tb26Data = null;
}

// Fetch Weekly Congestion data dynamically
let weeklyCongestionData;
try {
  const response = await fetch(`${baseUrl}/api/weekly-congestion`);
  if (response.ok) {
    weeklyCongestionData = await response.json();
  } else {
    console.error('Failed to fetch weekly congestion data:', response.status);
    weeklyCongestionData = null;
  }
} catch (error) {
  console.error('Error fetching weekly congestion data:', error);
  weeklyCongestionData = null;
}

// Helper function to format TB2.6 values
const formatTB26Value = (value: number) => value?.toFixed(2) || 'X.XX';

// Helper function to format congestion values
const formatCongestionValue = (value: number) => value?.toFixed(2) || '0.00';

// Helper function to get color class based on congestion value
const getCongestionColorClass = (value: number) => {
  if (value >= 0) {
    // Positive values - red scale
    if (value >= 50) return 'bg-red-700 text-white';
    if (value >= 30) return 'bg-red-600 text-white';
    if (value >= 15) return 'bg-red-500 text-white';
    if (value >= 5) return 'bg-red-400 text-white';
    if (value >= 1) return 'bg-red-300 text-white';
    return 'bg-red-100 text-gray-800';
  } else {
    // Negative values - blue scale
    const absValue = Math.abs(value);
    if (absValue >= 50) return 'bg-blue-700 text-white';
    if (absValue >= 30) return 'bg-blue-600 text-white';
    if (absValue >= 15) return 'bg-blue-500 text-white';
    if (absValue >= 5) return 'bg-blue-400 text-white';
    if (absValue >= 1) return 'bg-blue-300 text-white';
    return 'bg-blue-100 text-gray-800';
  }
};

// Helper function to format date for display (MM/DD)
const formatDateDisplay = (dateString: string) => {
  const date = new Date(dateString);
  return `${date.getMonth() + 1}/${date.getDate()}`;
};

// Helper function to get date range label
const getDateRangeLabel = (data: any[]) => {
  if (!data || data.length === 0) return '';
  const firstDate = new Date(data[0].date);
  const lastDate = new Date(data[data.length - 1].date);
  return `${formatDateDisplay(data[0].date)} - ${formatDateDisplay(data[data.length - 1].date)}`;
};
---
<Layout title="Gridstor Market Ops">
  <div class="text-center space-y-4">
    
    {/* TB2.6 Performance Overview */}
    <div class="bg-white border border-gray-200 rounded-xl shadow-sm p-6 max-w-6xl mx-auto">
      <div class="text-center mb-6">
        <h2 class="text-2xl font-semibold text-gray-800 mb-2">TB2.6 Performance Overview</h2>
        <p class="text-xs text-gray-500">Based on 60MW/160MWh battery with 86% round-trip efficiency, Day-Ahead values</p>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Last Year Card */}
        <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 text-center">
          <h3 class="text-lg font-medium text-gray-700 mb-3">Last Year</h3>
          <div class="mb-3">
            <div class="text-3xl font-bold text-gray-900">${formatTB26Value(tb26Data?.lastYear?.totalTB26)}</div>
            <div class="text-sm text-gray-500">/kW-month</div>
          </div>
          <div class="space-y-2 text-sm">
            <div class="flex justify-between">
              <span class="text-gray-600">Energy:</span>
              <span class="font-medium text-gray-900">${formatTB26Value(tb26Data?.lastYear?.energyTB26)}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Congestion:</span>
              <span class="font-medium text-gray-900">${formatTB26Value(tb26Data?.lastYear?.congestionTB26)}</span>
            </div>
          </div>
        </div>

        {/* Last Week Card */}
        <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 text-center">
          <h3 class="text-lg font-medium text-gray-700 mb-3">Last Week</h3>
          <div class="mb-3">
            <div class="text-3xl font-bold text-gray-900">${formatTB26Value(tb26Data?.lastWeek?.totalTB26)}</div>
            <div class="text-sm text-gray-500">/kW-month</div>
          </div>
          <div class="space-y-2 text-sm">
            <div class="flex justify-between">
              <span class="text-gray-600">Energy:</span>
              <span class="font-medium text-gray-900">${formatTB26Value(tb26Data?.lastWeek?.energyTB26)}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Congestion:</span>
              <span class="font-medium text-gray-900">${formatTB26Value(tb26Data?.lastWeek?.congestionTB26)}</span>
            </div>
          </div>
        </div>

        {/* This Week Card */}
        <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 text-center">
          <h3 class="text-lg font-medium text-gray-700 mb-3">This Week</h3>
          <div class="mb-3">
            <div class="text-3xl font-bold text-gray-900">${formatTB26Value(tb26Data?.thisWeek?.totalTB26)}</div>
            <div class="text-sm text-gray-500">/kW-month</div>
          </div>
          <div class="space-y-2 text-sm">
            <div class="flex justify-between">
              <span class="text-gray-600">Energy:</span>
              <span class="font-medium text-gray-900">${formatTB26Value(tb26Data?.thisWeek?.energyTB26)}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Congestion:</span>
              <span class="font-medium text-gray-900">${formatTB26Value(tb26Data?.thisWeek?.congestionTB26)}</span>
            </div>
          </div>
        </div>
      </div>


    </div>

    {/* Congestion Analysis - NEW SECTION */}
    <div class="bg-white border border-gray-200 rounded-xl shadow-sm p-6 max-w-6xl mx-auto">
      <div class="text-center mb-6">
        <h2 class="text-2xl font-semibold text-gray-800 mb-2">Weekly Congestion</h2>
        <div class="flex flex-wrap justify-center gap-6 text-sm">
          <div class="flex items-center gap-2">
            <div class="w-4 h-4 bg-red-500 rounded"></div>
            <span class="text-gray-600">Positive Congestion</span>
          </div>
          <div class="flex items-center gap-2">
            <div class="w-4 h-4 bg-blue-400 rounded"></div>
            <span class="text-gray-600">Negative Congestion</span>
          </div>
        </div>
      </div>
      
      {weeklyCongestionData ? (
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Last Week Chart */}
          <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 space-y-4">
            <h3 class="text-lg font-medium text-gray-700 text-center">
              Last Week
            </h3>
            
            {/* Top 2 Hours Stacked Bar */}
            <div class="space-y-3">
              <div class="flex justify-between text-sm text-gray-600">
                <span class="font-medium">Top 2 Hours</span>
              </div>
              
              <div class="relative">
                <div class="flex h-12 rounded-lg overflow-hidden shadow-sm border border-gray-200">
                  {/* Placeholder for Last Week - not implemented yet */}
                  <div class="flex-1 bg-gray-200 flex items-center justify-center text-gray-500 text-sm">
                    Coming Soon
                  </div>
                </div>
              </div>
            </div>

            {/* Bottom 2 Hours Stacked Bar */}
            <div class="space-y-3">
              <div class="flex justify-between text-sm text-gray-600">
                <span class="font-medium">Bottom 2 Hours</span>
              </div>
              
              <div class="relative">
                <div class="flex h-12 rounded-lg overflow-hidden shadow-sm border border-gray-200">
                  {/* Placeholder for Last Week - not implemented yet */}
                  <div class="flex-1 bg-gray-200 flex items-center justify-center text-gray-500 text-sm">
                    Coming Soon
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* This Week Chart */}
          <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 space-y-4">
            <h3 class="text-lg font-medium text-gray-700 text-center">
              This Week
            </h3>
            
            {/* Top 2 Hours Stacked Bar */}
            <div class="space-y-3">
              <div class="flex justify-between text-sm text-gray-600">
                <span class="font-medium">Top 2 Hours</span>
              </div>
              
              <div class="relative">
                <div class="flex h-12 rounded-lg overflow-hidden shadow-sm border border-gray-200">
                  {weeklyCongestionData.thisWeek.map((day: any) => (
                    <div 
                      class={`flex-1 text-xs flex items-center justify-center border-r border-white ${getCongestionColorClass(day.topHours.avgCongestion)}`}
                      style="width: 14.3%;" 
                      title={`${formatDateDisplay(day.date)}: $${formatCongestionValue(day.topHours.avgCongestion)}/MWh - ${day.topHours.constraintName}`}
                    >
                      {formatDateDisplay(day.date)}<br/>${formatCongestionValue(day.topHours.avgCongestion)}
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* Bottom 2 Hours Stacked Bar */}
            <div class="space-y-3">
              <div class="flex justify-between text-sm text-gray-600">
                <span class="font-medium">Bottom 2 Hours</span>
              </div>
              
              <div class="relative">
                <div class="flex h-12 rounded-lg overflow-hidden shadow-sm border border-gray-200">
                  {weeklyCongestionData.thisWeek.map((day: any) => (
                    <div 
                      class={`flex-1 text-xs flex items-center justify-center border-r border-white ${getCongestionColorClass(day.bottomHours.avgCongestion)}`}
                      style="width: 14.3%;" 
                      title={`${formatDateDisplay(day.date)}: $${formatCongestionValue(day.bottomHours.avgCongestion)}/MWh - ${day.bottomHours.constraintName}`}
                    >
                      {formatDateDisplay(day.date)}<br/>${formatCongestionValue(day.bottomHours.avgCongestion)}
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      ) : (
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Error/Loading State */}
          <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 space-y-4">
            <h3 class="text-lg font-medium text-gray-700 text-center">Last Week</h3>
            <div class="flex items-center justify-center h-24 text-gray-500">
              <p>Loading congestion data...</p>
            </div>
          </div>
          <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 space-y-4">
            <h3 class="text-lg font-medium text-gray-700 text-center">This Week</h3>
            <div class="flex items-center justify-center h-24 text-gray-500">
              <p>Loading congestion data...</p>
            </div>
          </div>
        </div>
      )}


    </div>
    
    {/* MCE Overview - NEW SECTION */}
    <div class="bg-white border border-gray-200 rounded-xl shadow-sm p-6 max-w-6xl mx-auto">
      <div class="text-center mb-6">
        <h2 class="text-2xl font-semibold text-gray-800 mb-2">MEC Overview</h2>
        <div class="flex flex-wrap justify-center gap-8 text-sm">
          <div class="flex items-center gap-2">
            <div class="w-4 h-0.5 bg-red-600"></div>
            <span class="text-gray-600">Top 2 Hours</span>
          </div>
          <div class="flex items-center gap-2">
            <div class="w-4 h-0.5 bg-blue-600"></div>
            <span class="text-gray-600">Bottom 2 Hours</span>
          </div>
        </div>
      </div>
      
      <div class="space-y-4">
        {/* React Chart Component */}
        <MECOverviewChart client:load />
      </div>
    </div>
    
  </div>
</Layout>
